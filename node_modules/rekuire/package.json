{
  "name": "rekuire",
  "version": "0.0.7",
  "description": "'rekuire' is basically node's 'require' without the relative paths",
  "repository": {
    "type": "git",
    "url": "http://github.com/nadav-dav/rekuire.git"
  },
  "main": "./lib/main.js",
  "scripts": {
    "test": "npm install && jasmine-node ./test/"
  },
  "dependencies": {
    "underscore": "*"
  },
  "devDependencies": {
    "fs-extra": "*",
    "jasmine-node": "*",
    "proxyquire": "*"
  },
  "keywords": [
    "require",
    "rekuire ",
    "relative",
    "path",
    "node"
  ],
  "author": {
    "name": "Nadav Dav",
    "email": "nadavik@gmail.com"
  },
  "license": "BSD",
  "readme": "Rekuire\n=========\n'rekuire' is basically node's 'require' without the relative paths\n\ninstallation\n-------------\nto install, type\n>```npm install rekuire```\n\n\nso how to use it?\n-----------------\n> instead of doing this: \n\n> ```var MyModule = require('../../../MyModule.js');``` *<-- yuck!*\n\n> &nbsp;\n> why not do this:<br/>\n> ```var rek = require('rekuire');```<br/>\n> ```var MyModule = rek('MyModule.js');```\n\n> if you want to resolve only the file location, for example, when you want to use [proxyquire][proxyquire].<br/>\n> use: <br/>\n> ```var mypath = rek().path('MyModule');```<br/>\n> ```// mypath = 'lib/classes/MyModule.js' ```\n\n- - - \n\nwhat does it do?\n----------------\n> when 'rekuire' is first loaded to the project, it scans the **.js* files,\n> then, when you need them they are right there to use!\n> no relative paths are needed! *yeahy!*\n\n- - -\n\nDevelopment\n-------------\n> To test, run: ```npm test```\n\n\n\n[proxyquire]:https://github.com/thlorenz/proxyquire",
  "readmeFilename": "README.md",
  "_id": "rekuire@0.0.7",
  "_from": "rekuire@0.0.7",
  "dist": {
    "shasum": "96b27c02d89fdd29e75b23b3f5617b4cfce6fb4c"
  },
  "_resolved": "https://registry.npmjs.org/rekuire/-/rekuire-0.0.7.tgz"
}
